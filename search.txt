Search and indexing configuration
=================================

How Indexing works
------------------

Indexing is not driven by the user, but happens automatically in the
background and can be controlled by the settings listed under
:ref:`search_configuration`. The indexer runs periodically as defined
by :term:omero.search.cron and parses the latest batch of new or
modified objects in the database.

Upon successful completion, the persistent count in the ``configuration``
table will be incremented.

::

    omero=# select value from configuration where name = 'PersistentEventLogLoader.v2.current_id';
     value
    -------
     30983
    (1 row)

.. note::

   If you have more than one ``PersistentEventLogLoader.*`` value in your
   database, then you have run indexing with multiple versions of the
   server. This is fine. To allow a new server version to force an update,
   the configuration key may be changed. For example,
   ``PersistentEventLogLoader.current_id`` became
   ``PersistentEventLogLoader.v2.current_id`` in :commit:`a5cb64a`.

.. _search-reindexing:

Re-indexing
-----------

There are a few reasons that you may need to re-index your database. The
following list is non-exhaustive:

- You have upgraded from a server prior to 5.0.1 and you have experienced
  issues with search in the past, re-indexing is highly recommended.
- Searching does not return the expected results (see
  :ref:`troubleshooting-search`).
- You would like to add large files that were previously skipped to the
  index (see :term:`omero.search.max_file_size`).

Background re-indexing
^^^^^^^^^^^^^^^^^^^^^^

Under most circumstances, you should be able to re-index the database while
the server is still running. If you need to make any adjustments to the server
configuration or the process heap size, first shut the server down and make
these changes before restarting the server. Use the following steps to
initiate a re-indexing.

-  Disable the search indexer process and stop any currently running indexer
   processes:

   ::

       $ bin/omero admin ice server disable Indexer-0
       $ bin/omero admin ice server stop Indexer-0

-  Remove the existing search Indexes by deleting the contents of the
   :file:`FullText` subdirectory of your ${omero.data.dir}

-  Reset the indexer's progress counter in the database

   ::

       $ psql -U <omero-db-user> <omero-db-name> -c "update configuration set value = 0 where name like 'PersistentEventLogLoader%';"

   substituting in your local omero database's user and name

-  Re-enable/restart the indexer process (the Ice grid will handle
   automatically restarting the process as soon as it is re-enabled)

   ::

       $ bin/omero admin ice server enable Indexer-0

Depending on the size of your database, it may take the indexer some time to
finish re-indexing. During this time, your OMERO server will remain available
for use, however the search functionality will be degraded until the
re-indexing is finished.

Off-line re-indexing
^^^^^^^^^^^^^^^^^^^^

It is also possible to re-index the database with the server off-line. First,
shutdown the OMERO server as normal and make any adjustments to the
configuration that need to be made. Clear the contents of the :file:`FullText`
directory, then run

::

   $ bin/omero admin reindex --full

Re-indexing the database in off-line mode will use a 1 GB heap by default (as
opposed to the default 256 MB heap for the indexer process in the running
server). You can further adjust the size of the heap by passing an alternate
value in the :envvar:`JAVA_OPTS` variable on the command line

::

   $ JAVA_OPTS="-Xmx2048MB" bin/omero admin reindex --full

You may also want to increase the :term:`omero.search.batch` size to take
advantage of the larger heap. The combination of a larger heap and batch size
should enable the re-index to complete sooner in off-line mode than it might
in the context of a running server.

Alternatively, you can re-index a specific class of objects in off-line mode,
followed by a later re-index with the server running. Start by shutting down
the server and clearing the contents of the :file:`FullText` directory. Then
reindex a specific class of object with

::

   $ bin/omero admin reindex --class ome.model.core.Image

Multiple classes can be re-indexed together by appending extra ``--class ...``
arguments on the command-line. Once this limited re-indexing is completed, you
can restart the server and search capabilities will be available in a limited
fashion. If you would then like to re-index the remaining objects in the
system, follow the steps for the on-line reindexing above, skipping the step
that involves clearing the ``FullText`` directory.

Monitoring re-indexing
^^^^^^^^^^^^^^^^^^^^^^

During re-indexing, it is possible to estimate the percent indexed using the
following SQL command::


    omero=> select 'At ' ||  current_timestamp(0) || ', Percent indexed: ' || trunc(((select count(*) from eventlog el, configuration c where el.id < cast(c.value as int) and (c.name like 'PersistentEventLogLoader%')) * 1.0) / (select count(*) from eventlog) * 100, 2) || '%';
                      ?column?
    ----------------------------------------------------
     At 2014-06-14 07:54:37+00, Percent indexed: 70.90%
    (1 row)

The overall re-indexing performance depends significantly on the memory
settings and the size of the repository to index. The following table provides
estimates of the process duration based on re-indexing of existing production
servers of various sizes:

.. list-table::
  :header-rows: 1

  - * Re-indexing type
    * Re-indexing duration
    * Binary repository size
    * Indexer JVM settings
    * omero.search.batch

  - * Background
    * 31h
    * 300GB
    * -Xmx512M
    * 50

  - * Background
    * 10 days
    * 16TB
    * -Xmx2048M
    * 100

.. seealso::
  :doc:`/developers/Modules/Search`
    Section of the developer documentation describing how to perform search
    queries against the server.
